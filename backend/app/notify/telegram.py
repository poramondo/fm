import os
import logging
import httpx
from typing import Iterable
from aiogram.utils.markdown import hbold, hcode  # —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —É–¥–æ–±–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
from app.models.request import Request

log = logging.getLogger("notify.telegram")

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
ADMIN_IDS = [x for x in os.getenv("TELEGRAM_ADMIN_IDS", "").replace(" ", "").split(",") if x]
TELEGRAM_ENABLED = os.getenv("TELEGRAM_ENABLED", "true").lower() in ("1", "true", "yes")
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL", "")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://fastmix.io

def _admin_ids() -> Iterable[int]:
    for x in ADMIN_IDS:
        try:
            yield int(x)
        except Exception:
            continue

def _status_label(code: str) -> str:
    mapping = {
        "AWAITING_PAYMENT": "üí∏ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É",
        "PROCESSING": "üõ† –û–±—Ä–∞–±–æ—Ç–∫–∞",
        "COMPLETED": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
        "CANCELED": "üõë –û—Ç–º–µ–Ω–µ–Ω–æ",
        "EXPIRED": "‚è∞ –ò—Å—Ç—ë–∫ —Å—Ä–æ–∫",
        "NEW": "üÜï –°–æ–∑–¥–∞–Ω–∞",
    }
    return mapping.get(code, code)

async def notify_new_request(req: Request) -> None:
    if not TELEGRAM_ENABLED or not BOT_TOKEN or not ADMIN_IDS:
        return

    link = f"\n–°—Å—ã–ª–∫–∞: {PUBLIC_BASE_URL}/status/{req.id}" if PUBLIC_BASE_URL else ""
    text = (
        f"{hbold('–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞')}\n"
        f"ID: {hcode(req.id)}\n"
        f"–°–µ—Ç—å: {req.currency}\n"
        f"Pay-in: {hcode(req.allocated_address or '-')}\n"
        f"Dest: {hcode(req.payout_address)}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {req.contact or '-'}\n"
        f"–°—Ç–∞—Ç—É—Å: {_status_label(req.status)}"
        f"{link}"
    )

    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    async with httpx.AsyncClient(timeout=10) as client:
        for admin_id in _admin_ids():
            try:
                await client.post(url, json={
                    "chat_id": admin_id,
                    "text": text,
                    "parse_mode": "HTML",
                    "disable_web_page_preview": True
                })
            except Exception as e:
                log.warning("Failed to notify admin %s: %s", admin_id, e)
